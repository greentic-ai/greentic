{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Flow",
  "description": "A declarative flow: id/title/description, map of node-configs, and connections",
  "type": "object",
  "required": [
    "connections",
    "description",
    "id",
    "nodes",
    "title"
  ],
  "properties": {
    "id": {
      "type": "string"
    },
    "title": {
      "type": "string"
    },
    "description": {
      "type": "string"
    },
    "channels": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "nodes": {
      "description": "node_id → node configuration",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/NodeConfig"
      }
    },
    "connections": {
      "description": "adjacency: from node_id → list of to node_ids",
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    }
  },
  "definitions": {
    "NodeConfig": {
      "description": "A single node’s config in the flow",
      "type": "object",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "channel"
          ],
          "properties": {
            "channel": {
              "description": "The channel’s canonical name",
              "type": "string"
            },
            "in": {
              "description": "Whether this node should receive (i.e. subscribe to) this channel",
              "type": "boolean"
            },
            "out": {
              "description": "Whether this node should send (i.e. publish to) this channel",
              "type": "boolean"
            },
            "from": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ValueOrTemplate_for_Participant"
                },
                {
                  "type": "null"
                }
              ]
            },
            "to": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/ValueOrTemplate_for_Participant"
              }
            },
            "content": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ValueOrTemplate_for_MessageContent"
                },
                {
                  "type": "null"
                }
              ]
            },
            "thread_id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ValueOrTemplate_for_String"
                },
                {
                  "type": "null"
                }
              ]
            },
            "reply_to_id": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ValueOrTemplate_for_String"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "tool"
          ],
          "properties": {
            "tool": {
              "$ref": "#/definitions/ToolNodeConfig"
            }
          }
        },
        {
          "description": "Every built‐in agent must implement the existing `AgentNode`‐like behavior. Instead of “trait objects,” we enumerate them here.",
          "type": "object",
          "anyOf": [
            {
              "$ref": "#/definitions/OllamaAgent"
            }
          ]
        },
        {
          "description": "An enum of all built-in variants plus a “Plugin” marker for any external WASM on disk.\n\nWhen you load a `.wasm` plugin from `/plugins/foo.wasm`, you will spawn a `BuiltInProcess::Plugin { name: \"foo\".into(), path: \"/plugins/foo.wasm\".into() }`.",
          "type": "object",
          "oneOf": [
            {
              "description": "A baked-in “debug” process",
              "type": "object",
              "required": [
                "debug"
              ],
              "properties": {
                "debug": {
                  "$ref": "#/definitions/debug"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "A baked-in script process (for example, a Rhia script)",
              "type": "object",
              "required": [
                "script"
              ],
              "properties": {
                "script": {
                  "$ref": "#/definitions/script"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "A baked-in Handlebars template process",
              "type": "object",
              "required": [
                "template"
              ],
              "properties": {
                "template": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "A Question & Answer process with optional agent support",
              "type": "object",
              "required": [
                "qa"
              ],
              "properties": {
                "qa": {
                  "$ref": "#/definitions/QAProcessNode"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "A disk-loaded plugin (e.g. `/plugins/foo.wasm` → name = \"foo\").",
              "type": "object",
              "required": [
                "plugin"
              ],
              "properties": {
                "plugin": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "description": "Unique name of the plugin (used as registry key)",
                      "type": "string"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        }
      ],
      "properties": {
        "config": true,
        "max_retries": {
          "default": 3,
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0.0
        },
        "retry_delay_secs": {
          "default": 1,
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "ValueOrTemplate_for_Participant": {
      "anyOf": [
        {
          "$ref": "#/definitions/Participant"
        },
        {
          "type": "string"
        }
      ]
    },
    "Participant": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "display_name": {
          "type": [
            "string",
            "null"
          ]
        },
        "channel_specific_id": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "ValueOrTemplate_for_MessageContent": {
      "anyOf": [
        {
          "$ref": "#/definitions/MessageContent"
        },
        {
          "type": "string"
        }
      ]
    },
    "MessageContent": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Text"
          ],
          "properties": {
            "Text": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "File"
          ],
          "properties": {
            "File": {
              "$ref": "#/definitions/FileMetadata"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Media"
          ],
          "properties": {
            "Media": {
              "$ref": "#/definitions/MediaMetadata"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Event"
          ],
          "properties": {
            "Event": {
              "$ref": "#/definitions/Event"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "FileMetadata": {
      "type": "object",
      "required": [
        "file_name",
        "mime_type",
        "url"
      ],
      "properties": {
        "file_name": {
          "type": "string"
        },
        "mime_type": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "size_bytes": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "MediaMetadata": {
      "type": "object",
      "required": [
        "file",
        "kind"
      ],
      "properties": {
        "kind": {
          "$ref": "#/definitions/MediaType"
        },
        "file": {
          "$ref": "#/definitions/FileMetadata"
        }
      }
    },
    "MediaType": {
      "type": "string",
      "enum": [
        "Image",
        "Video",
        "Audio",
        "Binary"
      ]
    },
    "Event": {
      "type": "object",
      "required": [
        "event_type"
      ],
      "properties": {
        "event_type": {
          "type": "string"
        },
        "event_payload": true
      }
    },
    "ValueOrTemplate_for_String": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "string"
        }
      ]
    },
    "ToolNodeConfig": {
      "description": "A ToolNodeConfig allows to call a tool either by name, action and the payload will be passed to the action. or dynamically by passing through the payload: \"tool_call\": { \"name\": \"<name of the tool to call>\", \"action\": \"<tool action to call>\", \"input\": \"<input parameters to pass to the tool>\" } You can use an optional Mapper for transforming input (in_map), output (out_map) and error (err_map). If you want a specific set of connections to be called when the call is successful, then set the names in the on_ok list. If you want other connections to be called on error, set their names in the on_err list. If no on_ok or on_err are specified then all connections will be called with the result.",
      "type": "object",
      "required": [
        "action",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "in_map": {
          "anyOf": [
            {
              "$ref": "#/definitions/map"
            },
            {
              "type": "null"
            }
          ]
        },
        "out_map": {
          "anyOf": [
            {
              "$ref": "#/definitions/map"
            },
            {
              "type": "null"
            }
          ]
        },
        "err_map": {
          "anyOf": [
            {
              "$ref": "#/definitions/map"
            },
            {
              "type": "null"
            }
          ]
        },
        "on_ok": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "on_err": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "map": {
      "oneOf": [
        {
          "description": "A mapper that copies selected fields from payload, config, and state, with an optional default value in case the field is not found.\n\nConfig and state only accept strings as keys. Payload also accepts JSON pointers so you can look up a value inside the payload, e.g. /parameters/days\n\n# Example ```json { \"type\": \"copy\", \"payload\": [\"a\", \"b\", { \"c\": 4 }], \"config\": [\"env\", { \"region\": \"eu-west-1\" }], \"state\": [\"done\", { \"tries\": 0 }] } ```",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "copy"
              ]
            },
            "payload": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/CopyKey"
              }
            },
            "config": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/CopyKey"
              }
            },
            "state": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/CopyKey"
              }
            }
          }
        },
        {
          "description": "A mapper that renames fields and optionally provides defaults.\n\n# Example ```json { \"type\": \"rename\", \"x\": { \"from\": \"payload\", \"key\": \"user_id\" }, \"y\": { \"from\": \"config\", \"key\": \"region\", \"default\": \"us-west\" }, \"z\": { \"from\": \"state\", \"key\": \"stage\", \"default\": \"init\" } } ```",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "rename"
              ]
            }
          }
        },
        {
          "description": "A mapper using Handlebars templating to build structured outputs.\n\n# Example ```json { \"type\": \"script\", \"template\": \"{ \\\"payload\\\": { \\\"temperature\\\": \\\"{{weather.temp_c}}\\\" } }\" } ``` Variables from `payload`, `config`, and `state` are flattened and available to the template context.\n\nIf the payload variable is an array coming from a tool, then automatically it will be converted into an object with key root: { ... the array ... }. You can then get information out in the following way: ```json {\"payload\": { \"temperature\": {{root.[0].current.temp_c}} }} ```",
          "type": "object",
          "required": [
            "template",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "script"
              ]
            },
            "template": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CopyKey": {
      "description": "Describes a key to copy from a source, with an optional default if missing.",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "additionalProperties": true
        }
      ]
    },
    "source": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "from",
            "key"
          ],
          "properties": {
            "from": {
              "type": "string",
              "enum": [
                "payload"
              ]
            },
            "key": {
              "type": "string"
            },
            "default": {
              "default": null
            }
          }
        },
        {
          "type": "object",
          "required": [
            "from",
            "key"
          ],
          "properties": {
            "from": {
              "type": "string",
              "enum": [
                "config"
              ]
            },
            "key": {
              "type": "string"
            },
            "default": {
              "default": null
            }
          }
        },
        {
          "type": "object",
          "required": [
            "from",
            "key"
          ],
          "properties": {
            "from": {
              "type": "string",
              "enum": [
                "state"
              ]
            },
            "key": {
              "type": "string"
            },
            "default": {
              "default": null
            }
          }
        }
      ]
    },
    "OllamaAgent": {
      "type": "object",
      "required": [
        "task"
      ],
      "properties": {
        "task": {
          "type": "string"
        },
        "model": {
          "type": [
            "string",
            "null"
          ]
        },
        "mode": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "embed",
            "chat",
            "generate"
          ]
        },
        "ollama_host": {
          "type": [
            "string",
            "null"
          ]
        },
        "ollama_port": {
          "type": [
            "integer",
            "null"
          ]
        },
        "model_options": {
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": true
        },
        "tool_names": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "debug": {
      "description": "A simple debug node for testing that just echoes its input.",
      "type": "object",
      "properties": {
        "print": {
          "type": "boolean"
        }
      }
    },
    "script": {
      "description": "A Rhai script process node\n\nThis node executes a [Rhai](https://rhai.rs) script to transform message input, payload, and state. It allows complex scripting logic with access to the following variables:\n\n- `msg`: the entire message object (including id, payload, session_id, etc.) - `payload`: the JSON value of the message payload (auto-parsed if it’s a string) - `state`: the internal node state as a key-value map - Each `state` key is also available as a top-level variable if it's a simple value\n\nThe script must return a value. This will be serialized and wrapped in `{\"output\": ...}` in the output message.\n\n---\n\n# 🔧 Example 1: Simple arithmetic\n\n```rhai let temp = payload[\"weather\"][\"temp\"]; let feels_like = temp - 2; feels_like ```\n\nOutput: ```json { \"output\": 21 } ```\n\n---\n\n# 📦 Example 2: Returning a structured object\n\n```rhai let name = state[\"user\"][\"name\"]; let id = msg.id; #{ greeting: \"Hi \" + name, id: id } ```\n\nOutput: ```json { \"output\": { \"greeting\": \"Hi Alice\", \"id\": \"abc123\" } } ```\n\n---\n\n# 🔁 Example 3: Using conditionals and loops\n\n```rhai let sum = 0; for x in payload[\"values\"] { if x > 0 { sum += x; } } sum ```\n\nOutput: ```json { \"output\": 42 } ```\n\n---\n\n# ✅ Example 4: Working with session ID and setting logic\n\n```rhai if msg.session_id == \"sess42\" { \"Session is active\" } else { \"Unknown session\" } ```\n\nOutput: ```json { \"output\": \"Session is active\" } ```\n\n---\n\n# 📚 Notes:\n\n- You can use any function or feature supported by Rhai. - Script errors are caught and returned as `NodeError::InvalidInput`. - All state values are converted to `Dynamic` if possible for easier access. - Avoid mutating external context; the script is intended to be pure and side-effect free.\n\n---\n\nFor full language documentation, see: https://rhai.rs/book/",
      "type": "object",
      "required": [
        "script"
      ],
      "properties": {
        "script": {
          "type": "string"
        }
      }
    },
    "QAProcessNode": {
      "description": "QAProcessNode\n\nA “stateful” question‐and‐answer node that guides a user through a series of prompts, validates and stores their answers in flow‐state, and finally routes the completed responses along one of several connections based on configurable rules.\n\n## Configuration (`QAProcessConfig`)\n\n- `welcome_template: String` A Handlebars template sent only once at the very start of a session. You can reference any existing `{{state.foo}}` keys here.\n\n- `questions: Vec<QuestionConfig>` The ordered list of questions to ask.  Each question has: ``` QuestionConfig { id:          String,               // unique identifier for routing prompt:      String,               // what to send as “text” answer_type: AnswerType,           // how to parse user reply state_key:   String,               // where to store in flow‐state validate:    Option<ValidationRule>, // optional regex or numeric range } ``` Available `AnswerType`s: ```text Text               → free‐form string (optional regex validation) Number             → parse as f64  (optional Range { min, max }) Date               → ISO8601 / RFC3339 dates Choice { options } → user must pick one of the provided strings ``` Optional `ValidationRule`s: ```text Regex(String)             // e.g. Regex(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\") Range { min: f64, max: f64 } // numeric bounds ```\n\n- `fallback_agent: Option<BuiltInAgent>` If the raw reply doesn’t parse or validate, you can hand it off to an LLM agent for interpretation (e.g. spell‐check, free‐text name parsing).\n\n- `routing: Vec<RoutingRule>` After all questions are answered, pick the next connection based on a `Condition`. Each `RoutingRule` is: ``` RoutingRule { condition: Condition,    // one of Always, Equals, GreaterThan, LessThan, Custom to:        String,       // node ID or channel name to send the final payload to } ``` ```markdown Conditions (all inside a top-level `condition:` key; omit or set to `null` for “always”):\n\n```yaml # exact equality condition: equals: question_id: \"age\" value: 21\n\n# numeric greater-than condition: greater_than: question_id: \"score\" threshold: 50.0\n\n# numeric less-than condition: less_than: question_id: \"score\" threshold: 20.0\n\n# arbitrary Handlebars boolean expr condition: custom: expr: \"state.score >= 75 && state.passed == true\"\n\n# omit entirely (or explicitly `condition: null`) → always matches\n\n## Example YAML Usage\n\n```yaml nodes: ask_user: qa: welcome_template: > Welcome! Let's gather a few details first. questions: - id:       \"name\" prompt:   \"👉 What is your full name?\" answer_type: Text state_key: \"user_name\"\n\n- id:       \"age\" prompt:   \"👉 How old are you?\" answer_type: Number state_key: \"user_age\" validate: Range: min: 0 max: 120\n\n- id:       \"birthdate\" prompt:   \"👉 When is your birthday? (YYYY-MM-DD)\" answer_type: Date state_key: \"user_birthdate\" validate: Regex: \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\"\n\n- id:       \"color\" prompt:   \"👉 Pick a color: red, green or blue.\" answer_type: Choice: options: [\"red\",\"green\",\"blue\"] state_key: \"favorite_color\"\n\n# if they are under 18, send to \"underage\" flow; else to \"main_process\" routing: - condition: Less_than: question_id: \"age\" threshold: 18 to: \"underage\"\n\n- to: \"main_process\" ```\n\nIn the above: 1. **First** the user receives the `welcome_template`. 2. **Then** each `prompt` is sent in order, and their reply is parsed/validated. 3. **Finally**, all answers are in `ctx.state` under `\"user_name\"`, `\"user_age\"`, etc., and the node emits a single `NodeOut::one(...)` carrying the full answers object to the connection named by the matching `RoutingRule`.\n\n> **Tip:** Use Handlebars in your prompts or `welcome_template` to show previously‐collected > values: > ```yaml > prompt: \"Nice to meet you, {{state.user_name}}! What’s your favorite number?\" > ```\n\nThis makes `QAProcessNode` a powerful way to build multi‐step, stateful forms or wizards entirely in your flow YAML, without writing any extra Rust!",
      "type": "object",
      "required": [
        "questions",
        "routing",
        "welcome_template"
      ],
      "properties": {
        "welcome_template": {
          "description": "A one‐time “welcome” message (Handlebars template) when a new user/session arrives.",
          "type": "string"
        },
        "questions": {
          "description": "The list of questions to ask, in order.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionConfig"
          }
        },
        "fallback_agent": {
          "description": "If the user’s free‐text reply doesn’t parse as any of our expected answer types, you can optionally hand them off to an LLM agent to try to interpret.",
          "anyOf": [
            {
              "$ref": "#/definitions/BuiltInAgent"
            },
            {
              "type": "null"
            }
          ]
        },
        "routing": {
          "description": "Once all questions are answered, pick the outgoing connection by matching one of these.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoutingRule"
          }
        }
      }
    },
    "QuestionConfig": {
      "type": "object",
      "required": [
        "answer_type",
        "id",
        "prompt",
        "state_key"
      ],
      "properties": {
        "id": {
          "description": "Unique ID for this question (used in state and in routing conditions).",
          "type": "string"
        },
        "prompt": {
          "description": "What to send to the user.  Can interpolate `{{state.foo}}`.",
          "type": "string"
        },
        "answer_type": {
          "description": "How to parse the user’s reply.",
          "allOf": [
            {
              "$ref": "#/definitions/AnswerType"
            }
          ]
        },
        "state_key": {
          "description": "Where in `NodeContext.state` to store the parsed value.",
          "type": "string"
        },
        "validate": {
          "description": "Optional regexp or range check to validate their answer.",
          "anyOf": [
            {
              "$ref": "#/definitions/ValidationRule"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "AnswerType": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "text",
            "number",
            "date"
          ]
        },
        {
          "type": "object",
          "required": [
            "choice"
          ],
          "properties": {
            "choice": {
              "type": "object",
              "required": [
                "options"
              ],
              "properties": {
                "options": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ValidationRule": {
      "anyOf": [
        {
          "description": "foo              → free‐form string",
          "type": "string"
        },
        {
          "description": "range: { min:…, max:… }",
          "type": "object",
          "required": [
            "range"
          ],
          "properties": {
            "range": {
              "$ref": "#/definitions/RangeParams"
            }
          }
        }
      ]
    },
    "RangeParams": {
      "description": "helper for your `range:` mapping",
      "type": "object",
      "required": [
        "max",
        "min"
      ],
      "properties": {
        "min": {
          "type": "number",
          "format": "double"
        },
        "max": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "BuiltInAgent": {
      "description": "Every built‐in agent must implement the existing `AgentNode`‐like behavior. Instead of “trait objects,” we enumerate them here.",
      "anyOf": [
        {
          "$ref": "#/definitions/OllamaAgent"
        }
      ]
    },
    "RoutingRule": {
      "type": "object",
      "required": [
        "to"
      ],
      "properties": {
        "condition": {
          "anyOf": [
            {
              "$ref": "#/definitions/Condition"
            },
            {
              "type": "null"
            }
          ]
        },
        "to": {
          "type": "string"
        }
      }
    },
    "Condition": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "equals"
          ],
          "properties": {
            "equals": {
              "type": "object",
              "required": [
                "question_id",
                "value"
              ],
              "properties": {
                "question_id": {
                  "type": "string"
                },
                "value": true
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "type": "object",
              "required": [
                "expr"
              ],
              "properties": {
                "expr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "greater_than"
          ],
          "properties": {
            "greater_than": {
              "type": "object",
              "required": [
                "question_id",
                "threshold"
              ],
              "properties": {
                "question_id": {
                  "type": "string"
                },
                "threshold": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "less_than"
          ],
          "properties": {
            "less_than": {
              "type": "object",
              "required": [
                "question_id",
                "threshold"
              ],
              "properties": {
                "question_id": {
                  "type": "string"
                },
                "threshold": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}