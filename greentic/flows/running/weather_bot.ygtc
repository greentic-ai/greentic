id: telegram.weather_with_ollama
title: Telegram → Weather (with Ollama extraction)
description: >
  A Telegram flow that greets the user, uses Ollama to parse “location”+“days,” 
  calls weather_api, and replies via a template.
channels:
  - telegram

nodes:
  # 1) Incoming Telegram node: listens for ANY message from Telegram.
  telegram_in:
    channel: telegram
    in: true

  # 2) QA node: ask location & days, fallback to OllamaAgent on parsing errors
  ask_location_and_days:
    qa:
      # No separate welcome—first question is our “greeting + ask location”
      welcome_template: "Hi there! Let's get your forecast. First: {{state_not_used}}"
      questions:
        - id: q_location
          prompt: "👉 What location would you like a forecast for?"
          answer_type: text
          state_key: q
        - id: q_days
          prompt: "👉 Over how many days? (enter a number)"
          answer_type: number
          state_key: days
          validate:
            range:
              min: 0.0
              max: 7.0
      fallback_agent:
        type: ollama
        model: llama3.2:1b
        # task: you can repeat the same instruction you used before
        task: |
          The user responded in free text.  Extract exactly two fields from
          their reply: `"q"` (string location) and `"days"` (integer number of days).
          Return **exactly** a JSON object like:
          {
            "q": "<location text>",
            "days": <integer>
          }
      routing:
        - to: forecast_weather

  # 3) “forecast_weather”: the Weather API tool, using the JSON from parse_request.
  forecast_weather:
    tool:
      name: weather_api
      action: forecast_weather
    max_retries: 2
    retry_delay_secs: 1

  # 5) “weather_out_template”: format the weather API’s JSON into a friendly sentence.
  weather_out_template:
    template: |
        Here’s your forecast for {{ location.name }}:

        • High: {{ forecast.forecastday.[0].day.maxtemp_c }}°C
        • Low: {{ forecast.forecastday.[0].day.mintemp_c }}°C
        • Condition: {{ forecast.forecastday.[0].day.condition.text }}
        • Rain Today? {{#if (eq (forecast.forecastday.[0].day.daily_will_it_rain) 1)}}Yes{{else}}No{{/if}}

  # 6) “telegram_out”: send any payload back to Telegram.
  telegram_out:
    channel: telegram
    out: true

connections:
  # Kick off QA on any incoming message
  telegram_in:
    - ask_location_and_days

  # Once QA finishes, go call weather_api
  ask_location_and_days:
    - telegram_out
    - forecast_weather

  # Then render & send back
  forecast_weather:
    - weather_out_template

  weather_out_template:
    - telegram_out
